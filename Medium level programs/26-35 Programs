Task 26: Using a HashTable for bank details
java
Copy code
import java.util.Hashtable;

public class BankDetails {
    public static void main(String[] args) {
        Hashtable<Integer, String> bankDetails = new Hashtable<>();

        // i) Add 3 records
        bankDetails.put(101, "John Doe");
        bankDetails.put(102, "Jane Smith");
        bankDetails.put(103, "Emily Davis");

        // ii) Display the size of HashTable
        System.out.println("Size of HashTable: " + bankDetails.size());

        // iii) Clear the HashTable
        bankDetails.clear();
        System.out.println("HashTable cleared. Size now: " + bankDetails.size());
    }
}
Task 27: Using Map interface for employee records
java
Copy code
import java.util.HashMap;
import java.util.Map;

public class EmployeeRecord {
    public static void main(String[] args) {
        Map<Integer, String> employeeRecord = new HashMap<>();

        // i) Add object
        employeeRecord.put(1, "Alice");
        employeeRecord.put(2, "Bob");
        employeeRecord.put(3, "Charlie");

        // ii) Check if the map is empty
        System.out.println("Is the employee record empty? " + employeeRecord.isEmpty());

        // iii) Remove specified object
        employeeRecord.remove(2);
        System.out.println("Employee record after removal: " + employeeRecord);

        // iv) Clear the map
        employeeRecord.clear();
        System.out.println("Employee record cleared. Is empty? " + employeeRecord.isEmpty());
    }
}
Task 28: Simple generics class for sorting values
java
Copy code
import java.util.Arrays;

class GenericSort<T extends Comparable<T>> {
    private T[] array;

    public GenericSort(T[] array) {
        this.array = array;
    }

    public void sort() {
        Arrays.sort(array);
    }

    public void printArray() {
        for (T element : array) {
            System.out.print(element + " ");
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        Integer[] intArray = {3, 1, 4, 1, 5, 9};
        GenericSort<Integer> intSorter = new GenericSort<>(intArray);
        intSorter.sort();
        intSorter.printArray();

        String[] stringArray = {"banana", "apple", "cherry"};
        GenericSort<String> stringSorter = new GenericSort<>(stringArray);
        stringSorter.sort();
        stringSorter.printArray();
    }
}
Task 29: Using ListIterator to modify and reverse elements
java
Copy code
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

public class ListIteratorExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>(List.of("C", "A", "E", "B", "D", "F"));
        ListIterator<String> iterator = list.listIterator();

        while (iterator.hasNext()) {
            String element = iterator.next();
            iterator.set(element + "+");
        }

        System.out.println("Modified list: " + list);

        System.out.println("Elements in reverse order:");
        while (iterator.hasPrevious()) {
            System.out.print(iterator.previous() + " ");
        }
    }
}
Task 30: Simple arithmetic operations with exception handling
java
Copy code
public class ArithmeticOperations {
    public static void main(String[] args) {
        try {
            int a = 10;
            int b = 0;
            int sum = a + b;
            int diff = a - b;
            int product = a * b;
            int quotient = a / b; // This will throw ArithmeticException
            System.out.println("Sum: " + sum);
            System.out.println("Difference: " + diff);
            System.out.println("Product: " + product);
            System.out.println("Quotient: " + quotient);
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException: Division by zero is not allowed.");
        }
    }
}
Task 31: Creating three threads to display natural numbers
java
Copy code
class NaturalNumbersThread extends Thread {
    private int start;
    private int end;

    public NaturalNumbersThread(int start, int end) {
        this.start = start;
        this.end = end;
    }

    public void run() {
        try {
            for (int i = start; i <= end; i++) {
                System.out.print(i + " ");
                Thread.sleep(500); // sleep for 500 milliseconds
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Thread t1 = new NaturalNumbersThread(1, 5);
        Thread t2 = new NaturalNumbersThread(6, 10);
        Thread t3 = new NaturalNumbersThread(11, 15);

        t1.start();
        t2.start();
        t3.start();
    }
}
Task 32: Finding the missing number in an array
java
Copy code
import java.util.Arrays;

public class MissingNumberFinder {
    public static void main(String[] args) {
        int[] a = {1, 4, 5, 3, 7, 8, 6};
        int n = 8;
        int missingNumber = findMissingNumber(a, n);
        System.out.println("Missing number: " + missingNumber);
    }

    public static int findMissingNumber(int[] a, int n) {
        int totalSum = n * (n + 1) / 2;
        int arraySum = Arrays.stream(a).sum();
        return totalSum - arraySum;
    }
}
Task 33: Class with methods in parent and subclass
java
Copy code
class Parent {
    public void printMessage() {
        System.out.println("This is parent class");
    }
}

class Child extends Parent {
    public void printMessage() {
        System.out.println("This is child class");
    }
    
    public static void main(String[] args) {
        Parent parent = new Parent();
        Child child = new Child();
        Parent parentRefChild = new Child();

        parent.printMessage(); // Method of parent class by object of parent class
        child.printMessage(); // Method of child class by object of child class
        parentRefChild.printMessage(); // Method of parent class by object of child class (overridden)
    }
}
Task 34: Class Student with constructor and methods to calculate total and average marks
java
Copy code
class Student {
    private String name;
    private int regNo;
    private int[] marks;
    private int total;
    private double average;

    public Student(String name, int regNo, int[] marks) {
        this.name = name;
        this.regNo = regNo;
        this.marks = marks;
        calculateTotalAndAverage();
    }

    private void calculateTotalAndAverage() {
        total = 0;
        for (int mark : marks) {
            total += mark;
        }
        average = total / (double) marks.length;
    }

    public void displayDetails() {
        System.out.println("Name: " + name);
        System.out.println("Register Number: " + regNo);
        System.out.println("Marks: " + Arrays.toString(marks));
        System.out.println("Total: " + total);
        System.out.println("Average: " + average);
    }

    public static void main(String[] args) {
        int[] marks = {85, 78, 92, 89, 76};
        Student student = new Student("John Doe", 12345, marks);
        student.displayDetails();
    }
}
Task 35: Counting words, characters, and lines from a file
java
Copy code
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileWordCount {
    public static void main(String[] args) {
        String filePath = "input.txt"; // change this to your file path
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            int charCount = 0;
            int wordCount = 0;
            int lineCount = 0;
            String line;

            while ((line = reader.readLine()) != null) {
                lineCount++;
                charCount += line.length();
                String[] words = line.split("\\s+");
                wordCount += words.length;
            }

            System.out.println("Number of characters: " + charCount);
            System.out.println("Number of words: " + wordCount);
            System.out.println("Number of lines: " + lineCount);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
