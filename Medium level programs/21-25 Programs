Task 21: Using threads with the Runnable interface to check if a number is prime
java
Copy code
class PrimeCheck implements Runnable {
    private int number;

    public PrimeCheck(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        if (number < 2) {
            System.out.println(number + " is not Prime");
            return;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                System.out.println(number + " is not Prime");
                return;
            }
        }
        System.out.println(number + " is Prime");
    }

    public static void main(String[] args) {
        int[] testCases = {5, 15, 4, -10, 0};
        for (int number : testCases) {
            Thread thread = new Thread(new PrimeCheck(number));
            thread.start();
        }
    }
}
Task 22: Handling exceptions using multi-catch statements
java
Copy code
public class MultiCatchExample {
    public static void main(String[] args) {
        try {
            int result = 10 / 0; // ArithmeticException
            int[] array = new int[5];
            int element = array[10]; // ArrayIndexOutOfBoundsException
            String str = null;
            System.out.println(str.length()); // NullPointerException
        } catch (ArithmeticException | ArrayIndexOutOfBoundsException | NullPointerException e) {
            System.out.println("Caught an exception: " + e.getClass().getSimpleName());
        }
    }
}
Task 23: Writing and reading a string using FileWriter and FileReader
java
Copy code
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;

public class FileReadWriteExample {
    public static void main(String[] args) {
        String data = "Computer Science and Engineering";

        try (FileWriter writer = new FileWriter("output.txt")) {
            writer.write(data);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileReader reader = new FileReader("output.txt")) {
            int character;
            while ((character = reader.read()) != -1) {
                System.out.print((char) character);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
Task 24: Constructing the volume of a box using a default constructor
java
Copy code
class Box {
    private double width, height, depth;

    public Box() {
        this.width = 1;
        this.height = 1;
        this.depth = 1;
    }

    public double getVolume() {
        return width * height * depth;
    }

    public static void main(String[] args) {
        Box box = new Box();
        System.out.println("Volume of the box is: " + box.getVolume());
    }
}
Task 25: String operations
java
Copy code
import java.util.Scanner;

public class StringOperations {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a string:");
        String input = scanner.nextLine();
        
        // Replace a word
        String replacedString = input.replace("Saveetha", "XYZ");
        System.out.println("Replaced string: " + replacedString);

        // Find length
        int length = input.length();
        System.out.println("Length of the string: " + length);

        // Uppercase conversion
        String upperCaseString = input.toUpperCase();
        System.out.println("Uppercase string: " + upperCaseString);

        scanner.close();
    }
}
